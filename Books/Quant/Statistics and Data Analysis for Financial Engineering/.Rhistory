ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 100, fill = 'steelblue',
color = 'hotpink')
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 100, fill = 'steelblue',
color = 'hotpink') +
labs(title = paste0('Histogram of Toss: ',numToss))
options(digits = 8)
set.seed(123)
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 100, fill = 'steelblue',
color = 'hotpink') +
labs(title = paste0('Histogram of Toss: ',numToss))
sprintf("%8f",numToss)
sprintf("%d",numToss)
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 100, fill = 'steelblue',
color = 'hotpink') +
labs(title = paste0('Histogram of Toss: ',sprintf("%d",numToss) ))
?spintf
?sprintf
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 100, fill = 'steelblue',
color = 'hotpink') +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
)
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 100, fill = 'steelblue',
color = 'hotpink') +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
xlab = 'Final P&L', ylabs = 'No. of Toss')
?labs
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 100, fill = 'steelblue',
color = 'hotpink') +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Toss')
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 100, fill = 'steelblue',
color = 'hotpink') +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 1000, fill = 'steelblue',
color = 'hotpink') +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
# http://www.rfortraders.com/simulation-of-a-coin-toss-in-r/
#
# 实现 P&L
#
library(magrittr)
library(ggplot2)
library(data.table)
options(digits = 8)
set.seed(123)
numToss <- 100000
# //////////////////////////////////////////////////////////////////////////////
# Method: 1
# //////////////////////////////////////////////////////////////////////////////
allToss <- sapply(1:numToss,function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
resultToss <- data.table(numToss = 1:numToss,
cumsumToss = allToss)
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 500, fill = 'steelblue',
color = 'hotpink') +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')+
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 500, fill = 'steelblue',
color = 'hotpink') +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 500, fill = 'steelblue',
color = 'hotpink') +
geom_vline(xintercept = 0, color = gray80) +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 500, fill = 'steelblue',
color = 'hotpink') +
geom_vline(xintercept = 0, color = 'gray80') +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 500, fill = 'steelblue',
color = 'hotpink') +
geom_vline(xintercept = 0, color = 'darkorange') +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 100, fill = 'steelblue',
color = 'hotpink') +
geom_vline(xintercept = 0, color = 'darkorange', size = 10) +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 100, fill = 'steelblue',
color = 'hotpink') +
geom_vline(xintercept = 0, color = 'darkorange', size = 3) +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 1000, fill = 'steelblue',
color = 'hotpink') +
geom_vline(xintercept = 0, color = 'darkorange', size = 3) +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 1000, fill = 'steelblue',
color = 'hotpink') +
geom_vline(xintercept = 0, color = 'darkorange', size = 2) +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
library(paralle)
cl <- makeCluster(detectCores())
library(parallel)
cl <- makeCluster(detectCores())
stop(cl)
stopCluster(cl)
?EvalQ
??EvalQ
?parallel
library(parallel)
cl <- makeCluster(detectCores())
clusterExport(cl,{library(magrittr);library(data.table)})
clusterEvalQ(cl,numToss)
resultToss <- parLapply(cl, 1:numToss, function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}) %>% rbindlist()
stopCluster(cl)
library(parallel)
cl <- makeCluster(detectCores())
clusterExport(cl,{library(magrittr);library(data.table)})
clusterEvalQ(cl,'numToss')
resultToss <- parLapply(cl, 1:numToss, function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}) %>% rbindlist()
stopCluster(cl)
library(parallel)
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{library(magrittr);library(data.table)})
clusterExport(cl,'numToss')
resultToss <- parLapply(cl, 1:numToss, function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}) %>% rbindlist()
stopCluster(cl)
library(parallel)
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{library(magrittr);library(data.table)})
clusterExport(cl,'numToss')
resultToss <- parLapply(cl, 1:numToss, function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
stopCluster(cl)
resultToss
library(parallel)
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{library(magrittr);library(data.table)})
clusterExport(cl,'numToss')
resultToss <- parSapply(cl, 1:numToss, function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
stopCluster(cl)
resultToss
plotToss <- function(x){
resultToss <- data.table(numToss = 1:numToss,
cumsumToss = x)
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 1000, fill = 'steelblue',
color = 'hotpink') +
geom_vline(xintercept = 0, color = 'darkorange', size = 2) +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
}
plotToss(allToss)
# //////////////////////////////////////////////////////////////////////////////
system.time({
allToss <- sapply(1:numToss,function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
plotToss(allToss)
})
# //////////////////////////////////////////////////////////////////////////////
system.time({
library(parallel)
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{library(magrittr);library(data.table)})
clusterExport(cl,'numToss')
allToss <- parSapply(cl, 1:numToss, function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
stopCluster(cl)
plotToss(allToss)
})
# parallel
# //////////////////////////////////////////////////////////////////////////////
system.time({
library(parallel)
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{library(magrittr);library(data.table)})
clusterExport(cl,'numToss')
allToss <- parSapply(cl, 1:numToss, function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
stopCluster(cl)
plotToss(allToss)
})
plotToss(allToss)
# http://www.rfortraders.com/simulation-of-a-coin-toss-in-r/
#
# 实现 P&L
#
library(magrittr)
library(ggplot2)
library(data.table)
options(digits = 8)
set.seed(123)
numToss <- 1000000
plotToss <- function(x){
resultToss <- data.table(numToss = 1:numToss,
cumsumToss = x)
ggplot(data = resultToss) +
geom_histogram(mapping = aes(x = cumsumToss),
bins = 1000, fill = 'steelblue',
color = 'hotpink') +
geom_vline(xintercept = 0, color = 'darkorange', size = 2) +
labs(title = paste0('Histogram of Toss: '
,format(numToss, big.mark = ',', scientific = F)
),
caption = '@William Fang') +
xlab('Final P&L') + ylab('No. of Counts')
}
# //////////////////////////////////////////////////////////////////////////////
# Method: 1
# //////////////////////////////////////////////////////////////////////////////
system.time({
allToss <- sapply(1:numToss,function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
plotToss(allToss)
})
numToss <- 100000
allToss <- list()
i = 1
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
allToss[i]
allToss <- c()
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
allToss[i
]
allToss
system.time({
allToss <- c()
for(i in 1:numToss){
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}
plotToss(allToss)
})
# //////////////////////////////////////////////////////////////////////////////
system.time({
allToss <- c()
for(i in 1:numToss){
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}
})
plotToss(allToss)
x = allToss
name(x)
names(x)
x
as.symbol(x)
x
eval(x)
eval(as.symbol(x))
system.time({
allToss1 <- c()
for(i in 1:numToss){
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}
})
system.time({
allToss2 <- sapply(1:numToss,function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
system.time({
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{library(magrittr)})
clusterExport(cl,'numToss')
allToss3 <- parSapply(cl, 1:numToss, function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
stopCluster(cl)
})
plotToss(allToss3)
plotToss(allToss2)
plotToss(allToss1)
allToss
allToss1
system.time({
allToss1 <- c()
for(i in 1:numToss){
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}
})
allToss1
i = 1
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
allToss
system.time({
allToss1 <- list()
for(i in 1:numToss){
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}
allToss1 <- unlist(allToss)
})
allToss1
plotToss(allToss1)
system.time({
allToss2 <- sapply(1:numToss,function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
# //////////////////////////////////////////////////////////////////////////////
system.time({
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{library(magrittr)})
clusterExport(cl,'numToss')
allToss3 <- parSapply(cl, 1:numToss, function(i){
temp <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
})
stopCluster(cl)
})
plotToss(allToss3)
system.time({
allToss1 <- list(numToss)
for(i in 1:numToss){
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}
allToss1 <- unlist(allToss)
})
system.time({
allToss1 <- c(NA)
length(allToss1) <- numToss
for(i in 1:numToss){
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}
})
emptyArray <- c()
system.time(
for(i in 1:100000) {
emptyArray[i] <- i
})
fullArray         <- c(NA)
length(fullArray) <- 100000
system.time(
for(i in 1:100000) {
fullArray[i] <- i
})
system.time({
allToss1 <- c(rep(NA),numToss)
for(i in 1:numToss){
allToss[i] <- sample(c(-1,1), 1000, replace = T) %>%
cumsum() %>% .[length(.)]
}
})
library(ggolot2)
library(ggplot2)
?geom_area
huron <- data.frame(year = 1875:1972, level = as.vector(LakeHuron))
h <- ggplot(huron, aes(year))
h + geom_ribbon(aes(ymin=0, ymax=level))
h + geom_area(aes(y = level))
huron <- data.frame(year = 1875:1972, level = as.vector(LakeHuron))
h <- ggplot(huron, aes(year))
h + geom_ribbon(aes(ymin=0, ymax=level))
?annotate
rm(list = ls())
library(RMySQL)
library(magrittr)
library(data.table)
library(readr)
y  <- matrix(c(1,4,1,0,2,-1), nrow = 2)
y
y  <- matrix(c(1,4,1,0,2,-1), nrow = 2, byrow = TRUE)
y
apply(y[,2:3], 1, mean)
apply(y[,2:3], 2, mean)
?list
setwd("Y:/myBooks/quant/Statistics and Data Analysis for Financial Engineering")
library(data.table)
list.files()
list.files('./datasets')
dt <- fread('./datasets/Stock_Bond.csv')
dt
summary(dt)
type(dt)
typeof(dt)
str(dt)
par(margin = c(2,2,4,4), mfrow(1,2))
par(margin = c(2,2,4,4), mfrow = c(1,2))
par(mar = c(2,2,4,4), mfrow = c(1,2))
plot(dt$GM_AC)
plot(dt$F_AC)
dt
GMRtn <- dt[-1,GM_AC] / dt[-N, GM_AC] - 1
GMRtn <- dt[-1,GM_AC] / dt[-.N, GM_AC] - 1
FRtn <- dt[-1,F_AC] / dt[-.N, F_AC] - 1
par(mfrow = c(1,1))
plot(GMRtn, FRtn, type = 'l', col = 'red')
plot(GMRtn, FRtn, type = 'o', col = 'red')
par(mfrow = c(1,1))
plot(GMRtn, FRtn, type = 'o', col = 'red')
plot(GMRtn, FRtn, type = 'b', col = 'red')
plot(GMRtn, FRtn col = 'red')
par(mfrow = c(1,1))
plot(GMRtn, FRtn, col = 'red')
library(ggplot2)
qplot(GMRtn, FRtn)
qplot(GMRtn, FRtn, alpha = 0.2)
qplot(GMRtn, FRtn, alpha = 0.2, color = 'steelblue', size = 0.5)
qplot(GMRtn, FRtn, alpha = 0.2, color = 'steelblue', size = 0.2)
?qplot
qplot(GMRtn, FRtn,color = 'steelblue', size = 0.2)
qplot(mpg, wt, data = mtcars, colour = cyl)
